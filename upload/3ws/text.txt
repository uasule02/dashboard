eas build -p android --profile preview

AIzaSyCIk0V2pmG_Mdj7V6jRTbVSeLW2eQRASvY

import { getAuth, sendEmailVerification } from "firebase/auth";

const auth = getAuth();
sendEmailVerification(auth.currentUser)
  .then(() => {
    // Email verification sent!
    // ...
  });


import { getAuth, sendPasswordResetEmail } from "firebase/auth";

const auth = getAuth();
sendPasswordResetEmail(auth, email)
  .then(() => {
    // Password reset email sent!
    // ..
  })
  .catch((error) => {
    const errorCode = error.code;
    const errorMessage = error.message;
    // ..
  });




//updated

import React, { useState, useEffect } from 'react';
import { Text, View, StyleSheet, Button } from 'react-native';
import * as Location from 'expo-location';
import { geocodeAsync } from 'expo-location';

export default function PostScreen() {
  const [location, setLocation] = useState(null);
  const [nearbyPlaces, setNearbyPlaces] = useState([]);
  const [loading, setLoading] = useState(false);

  useEffect(() => {
    getLocation();
  }, []);

  const getLocation = async () => {
    setLoading(true);
    let { status } = await Location.requestForegroundPermissionsAsync();

    if (status !== 'granted') {
      console.log('Permission to access location was denied');
      setLoading(false);
      return;
    }

    let location = await Location.getCurrentPositionAsync({});
    setLocation(location);
    setLoading(false);
  };

  const getNearbyPlaces = async () => {
    setLoading(true);
    const { latitude, longitude } = location.coords;
    const radius = 1000; // 1km radius
    const places = [
      { name: 'Restaurant A', address: '123 Main St' },
      { name: 'Cafe B', address: '456 Elm St' },
      { name: 'Store C', address: '789 Oak St' },
    ];
    setNearbyPlaces(places);
    setLoading(false);
  };

  let content = <Text>Loading...</Text>;

  if (location) {
    const { latitude, longitude } = location.coords;

    const getAddress = async (lat, lon) => {
      try {
        const geocode = await Location.reverseGeocodeAsync({ latitude: lat, longitude: lon });

        if (geocode.length > 0) {
          const { name, street, city, country } = geocode[0];
          const placeName = name || '';
          const address = `${street || ''}, ${city || ''}, ${country || ''}`;
          return { placeName, address };
        }
      } catch (error) {
        console.log('Error getting address:', error);
      }

      return null;
    };

    const getUserLocation = async () => {
      const userLocation = await getAddress(latitude, longitude);
      if (userLocation) {
        const { placeName, address } = userLocation;
        return (
          <View>
            <Text style={styles.locationTitle}>You are here:</Text>
            <Text style={styles.placeName}>{placeName}</Text>
            <Text style={styles.address}>{address}</Text>
          </View>
        );
      }

      return null;
    };

    content = (
      <View>
        {getUserLocation()}
        <Button title="Get Nearby Places" onPress={getNearbyPlaces} disabled={loading} />
        {loading ? (
          <Text>Loading nearby places...</Text>
        ) : (
          <View>
            <Text style={styles.nearbyTitle}>Nearby Places:</Text>
            {nearbyPlaces.length > 0 ? (
              nearbyPlaces.map((place, index) => (
                <View key={index} style={styles.placeContainer}>
                  <Text style={styles.placeName}>{place.name}</Text>
                  <Text style={styles.address}>{place.address}</Text>
                </View>
              ))
            ) : (
              <Text>No nearby places found.</Text>
            )}
          </View>
        )}
      </View>
    );
  }

  return <View style={styles.container}>{content}</View>;
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    alignItems: 'center',
    justifyContent: 'center',
    padding: 20,
  },
  locationTitle: {
    fontSize: 20,
    fontWeight: 'bold',
    marginBottom: 10,
  },
  placeName: {
    fontSize: 18,
    fontWeight: 'bold',
    marginBottom: 5,
  },
  address: {
    fontSize: 16,
    marginBottom: 10,
  },
  nearbyTitle: {
    fontSize: 20,
    fontWeight: 'bold',
    marginTop: 20,
    marginBottom: 10,
  },
  placeContainer: {
    marginBottom: 10,
  },
});




google map access


import React, { useState, useEffect } from 'react';
import { Text, View, StyleSheet, Button } from 'react-native';
import * as Location from 'expo-location';

export default function PostScreen() {
  const [location, setLocation] = useState(null);
  const [errorMsg, setErrorMsg] = useState(null);
  const [nearbyPlaces, setNearbyPlaces] = useState([]);
  const [loading, setLoading] = useState(false);

  useEffect(() => {
    (async () => {
      let { status } = await Location.requestForegroundPermissionsAsync();
      if (status !== 'granted') {
        setErrorMsg('Permission to access location was denied');
        return;
      }

      let location = await Location.getCurrentPositionAsync({});
      setLocation(location);
    })();
  }, []);

  const getNearbyPlaces = async () => {
    setLoading(true);
    try {
      const apiKey = ''; // Replace with your Google Places API Key
      const { latitude, longitude } = location.coords;
      const radius = 1000; // Specify the radius in meters for nearby places search

      const response = await fetch(
        `https://maps.googleapis.com/maps/api/place/nearbysearch/json?location=${latitude},${longitude}&radius=${radius}&key=${apiKey}`
      );

      const result = await response.json();
      setNearbyPlaces(result.results.map((place) => place.name));
    } catch (error) {
      console.log('Error fetching nearby places:', error);
    } finally {
      setLoading(false);
    }
  };

  let content = <Text>Loading...</Text>;

  if (errorMsg) {
    content = <Text>Error: {errorMsg}</Text>;
  } else if (location) {
    content = (
      <View>
        <Button title="Get Nearby Places" onPress={getNearbyPlaces} disabled={loading} />
        {loading ? (
          <Text>Loading nearby places...</Text>
        ) : (
          <View>
            {nearbyPlaces.map((place, index) => (
              <Text key={index}>{place}</Text>
            ))}
          </View>
        )}
      </View>
    );
  }

  return <View style={styles.container}>{content}</View>;
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    alignItems: 'center',
    justifyContent: 'center',
    padding: 20,
  },
});

